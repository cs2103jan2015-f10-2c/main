//@author: a0105180w



	/**
	 * origin: C:\Users\SKR\Documents\main\iPlanner Log\Log.cpp
	 */

#include "Log.h"

void Log::writeToLogFile(string stringToBeLogged) {

	ofstream writeFile("log.txt", ios::app);
	writeFile << stringToBeLogged << endl;

	writeFile.close();
}

void Log::clearLogFile() {
	ofstream writeFile("log.txt");
}
	// End of segment: C:\Users\SKR\Documents\main\iPlanner Log\Log.cpp





	/**
	 * origin: C:\Users\SKR\Documents\main\iPlanner Log\Log.h
	 */

// Log
// Group : F10-2C
// Coder : Shri Kishen Rajendran
#ifndef LOG_H
#define LOG_H

#include<iostream>
#include<string>
#include<fstream>

using namespace std;

class Log {	
public:
	void writeToLogFile(string);
	void clearLogFile();
};
#endif
	// End of segment: C:\Users\SKR\Documents\main\iPlanner Log\Log.h





	/**
	 * origin: C:\Users\SKR\Documents\main\iPlannerUI\iPlannerUI.cpp
	 */

#include "iPlannerUI.h"

using namespace System; 
using namespace System::Windows::Forms;

[STAThread] 
void main(array<String^>^ args) {

	Application::EnableVisualStyles(); 
	Application::SetCompatibleTextRenderingDefault(false);
	iPlannerUI::iPlannerUI mainWindow; 
	Application::Run(%mainWindow);
}
	// End of segment: C:\Users\SKR\Documents\main\iPlannerUI\iPlannerUI.cpp





	/**
	 * origin: C:\Users\SKR\Documents\main\iPlannerUI\iPlannerUI.h
	 */

// GUI
// Group : F10-2C
// Coder : Shri Kishen Rajendran

#pragma once

#include "..\iLogic\Logic.h"
#include "..\iStorage\Item.h"
#include "..\iPlanner Log\Log.h"
#include <msclr\marshal_cppstd.h>

using namespace std;
using namespace System;

	// End of segment: C:\Users\SKR\Documents\main\iPlannerUI\iPlannerUI.h





	/**
	 * origin: C:\Users\SKR\Documents\main\iPlannerUI\iPlannerUI.h
	 */

		Logic* testLogic;
	public:
		iPlannerUI(void) {
			
			InitializeComponent();
			//
			//TODO: Add the constructor code here
			//
			testLogic = new Logic();
		}

	protected:
		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		~iPlannerUI() {

			if (components)
			{
				delete components;
				delete testLogic;
			}
		}
	// End of segment: C:\Users\SKR\Documents\main\iPlannerUI\iPlannerUI.h





	/**
	 * origin: C:\Users\SKR\Documents\main\iPlannerUI\iPlannerUI.h
	 */

		void displayPriorityAndName(String^ priority, String^ name) {
			outputBox->SelectionFont = gcnew System::Drawing::Font("Segoe UI", 10, FontStyle::Bold);
			if (priority == "H") {
				outputBox->SelectionColor = Color::Red;
			} else if (priority == "M") {
				outputBox->SelectionColor = Color::Yellow;;
			} else if (priority == "L") {
				outputBox->SelectionColor = Color::LawnGreen;
			} else {
				outputBox->SelectionColor = Color::CadetBlue;
			}
			outputBox->SelectedText = "   " + priority;
			outputBox->SelectionFont = gcnew System::Drawing::Font("Segoe UI", 10);
			outputBox->SelectionColor = Color::CadetBlue;
			outputBox->SelectedText = "    " + name;
		}

		void displayCompletion(String^ completion) {
			if (completion == "(D)") {
				outputBox->SelectionFont = gcnew System::Drawing::Font("Segoe UI", 10);
				outputBox->SelectionColor = Color::Gold;
				outputBox->SelectedText = " " + completion + "\r\n";
			} else {
				outputBox->SelectionFont = gcnew System::Drawing::Font("Segoe UI", 10);
				outputBox->SelectionColor = Color::Silver;
				outputBox->SelectedText = " " + completion + "\r\n";
			}
		}

		void displayStartTime(String^ startTime) {
			if (startTime != "") {
				outputBox->SelectionFont = gcnew System::Drawing::Font("Segoe UI", 10);
				outputBox->SelectionColor = Color::LightGoldenrodYellow;
				outputBox->SelectedText = "\t     Start : " + startTime + "\r\n";
			} else {
				outputBox->SelectionFont = gcnew System::Drawing::Font("Segoe UI", 10);
				outputBox->SelectionColor = Color::LightGoldenrodYellow;
				outputBox->SelectedText = "";
			}
		}

		void displayEndTime(String^ endTime) {
			if (endTime != "") {
				outputBox->SelectionFont = gcnew System::Drawing::Font("Segoe UI", 10);
				outputBox->SelectionColor = Color::LightSalmon;
				outputBox->SelectedText = "\t     End  : " + endTime + "\r\n";
			} else {
				outputBox->SelectionFont = gcnew System::Drawing::Font("Segoe UI", 10);
				outputBox->SelectionColor = Color::LightSalmon;
				outputBox->SelectedText = "";
			}
		}

		void displayDescription(String^ description) {
			if (description != "") {
				outputBox->SelectionFont = gcnew System::Drawing::Font("Segoe UI", 10, FontStyle::Italic);
				outputBox->SelectionColor = Color::BlueViolet;
				outputBox->SelectedText = "\t     " + description + "\r\n\r\n";
			} else {
				outputBox->SelectionFont = gcnew System::Drawing::Font("Segoe UI", 10, FontStyle::Italic);
				outputBox->SelectionColor = Color::BlueViolet;
				outputBox->SelectedText = "\r\n";
			}

		}

    // Function to display the Schedule when the user inputs a command
	private: System::Void commandInputBox_KeyDown(System::Object^  sender, System::Windows::Forms::KeyEventArgs^  e) {
				 MESSAGE_AND_SCHEDULE displayMessage;
				 Log newLog;
				 String^ userInput;
				 userInput = commandInputBox->Text;
				 string stdUserInput;
				 MarshalString(userInput, stdUserInput);
				 vector<Item> tempItem;

				 // Command entered by user is passed to Logic only when the Enter key is pressed
				 if (e->KeyCode == Keys::Enter) {
					 newLog.writeToLogFile(stdUserInput);
					 displayMessage = testLogic->initiateCommandAction(stdUserInput);
					 outputBox->Clear();
					 
					 tempItem = testLogic->getDisplaySchedule();
					 vector<Item>::iterator iterItem;
					 int displayIndex = 0;
					 for (iterItem = tempItem.begin(); iterItem != tempItem.end(); iterItem++) {
						 
						 String ^indexString = (++displayIndex).ToString();
						 outputBox->SelectionFont = gcnew System::Drawing::Font("Segoe UI", 10);
						 outputBox->SelectionColor = System::Drawing::Color::CadetBlue;
						 outputBox->SelectedText = indexString + ". ";

						 String^ nameString = gcnew String(iterItem->getItemName().c_str());
						 if (iterItem->getPriority() == 72) {
							 displayPriorityAndName("H", nameString);
                         } else if (iterItem->getPriority() == 77) {
							 displayPriorityAndName("M", nameString);
						 } else if (iterItem->getPriority() == 76) {
							 displayPriorityAndName("L", nameString);
						 } else {
							 displayPriorityAndName("-", nameString);
						 }
						 
						 if (iterItem->getCompletion() == true) {
							 displayCompletion("(D)");
						 } else {
							 displayCompletion("(ND)");
						 }

						 String^ startString = gcnew String(iterItem->displayStartTimeForUser().c_str());
						 displayStartTime(startString);

						 String^ endString = gcnew String(iterItem->displayEndTimeForUser().c_str());
						 displayEndTime(endString);

						 String^ descriptionString = gcnew String(iterItem->getDescription().c_str());
						 displayDescription(descriptionString);

					 }

					 String^ outcomeString = gcnew String(displayMessage.message.c_str());
					 commandOutcomeLabel->Text = outcomeString;
					 outputBox->SelectionStart = 0;
					 newLog.writeToLogFile("");
					 commandInputBox->Clear();
				 }

	}
	
    // Function to display Schedule when the program is opened
	private: System::Void iPlannerUI_Load(System::Object^  sender, System::EventArgs^  e) {
				 
				 Log newLog;
				 newLog.clearLogFile();
				 newLog.writeToLogFile("Log file opened");
				 
				 testLogic->retrieveBasicInformationFromTextFile();
				 testLogic->readDataFromFile();
				 
				 outputBox->Clear();			
				 vector<Item> tempItem = testLogic->getDisplaySchedule();
				 vector<Item>::iterator iterItem;
				 int displayIndex = 0;
				 
				 for (iterItem = tempItem.begin(); iterItem != tempItem.end(); iterItem++) {
					 
					 String ^indexString = (++displayIndex).ToString();
					 outputBox->SelectionFont = gcnew System::Drawing::Font("Segoe UI", 10);
					 outputBox->SelectionColor = System::Drawing::Color::CadetBlue;
					 outputBox->SelectedText = indexString + ". ";

					 String^ nameString = gcnew String(iterItem->getItemName().c_str());
					 if (iterItem->getPriority() == 72) {
						 displayPriorityAndName("H", nameString);
					 } else if (iterItem->getPriority() == 77) {
						 displayPriorityAndName("M", nameString);
					 } else if (iterItem->getPriority() == 76) {
						 displayPriorityAndName("L", nameString);
					 } else {
						 displayPriorityAndName("-", nameString);
					 }

					 if (iterItem->getCompletion() == true) {
						 displayCompletion("(D)");
					 } else {
						 displayCompletion("(ND)");
					 }

					 String^ startString = gcnew String(iterItem->displayStartTimeForUser().c_str());
					 displayStartTime(startString);

					 String^ endString = gcnew String(iterItem->displayEndTimeForUser().c_str());
					 displayEndTime(endString);

					 String^ descriptionString = gcnew String(iterItem->getDescription().c_str());
					 displayDescription(descriptionString);
				 }
				 outputBox->SelectionStart = 0;
				 commandOutcomeLabel->Text = "Enter the command";

	}

	// Below functions display the list of commands for the user's reference
	private: System::Void basicCommandsToolStripMenuItem_Click(System::Object^  sender, System::EventArgs^  e) {
				 String^ helpMenuAdd = "\t\t            Add a Task Commands\r\n";

				 helpMenuAdd += "\r\nadd <taskName> followed by task entities\r\n\r\n";
				 helpMenuAdd += "The task entities could be entered with the following sub-commands : \r\n";
				 helpMenuAdd += "Starting Time of Task : -start <DateTime> or -date <DateTime>\r\n";
				 helpMenuAdd += "Ending Time of Task :  -end <DateTime> or -due <DateTime>\r\n";
				 helpMenuAdd += "Task Description : -desc <Description>\r\n";
				 helpMenuAdd += "Task Priority : -priority <High/Medium/Low>  or -priority <H/M/L>\r\n";
				 helpMenuAdd += "\r\nNote : For adding or editing start and end times simultaneously, only -start and -end can be used together\r\n";
				 helpMenuAdd += "\r\nTo refer possible <DateTime> variations, Help -> Adding a Task -> Date and Time Variations";

				 MessageBox::Show(helpMenuAdd);
	}

	private: System::Void dateAndTimeVariationsToolStripMenuItem_Click(System::Object^  sender, System::EventArgs^  e) {
				 String^ helpMenuDT;
				 
				 helpMenuDT += "\t\t           <DateTime> Variations\r\n";
				 helpMenuDT += "<Date>, <Time>\r\n";
				 helpMenuDT += "<Time>, <Date>\r\n";
				 helpMenuDT += "<Date>\r\n";
				 helpMenuDT += "<Time> - Today's date is set as Date\r\n";

				 helpMenuDT += "\r\nDate Variations\r\n";
				 helpMenuDT += "DD/MM/YYYY\r\n";
				 helpMenuDT += "DD MonthName/MonthShortForm YYYY\r\n";
				 helpMenuDT += "DD/MM - Year set to Current Year\r\n";
				 helpMenuDT += "DD MonthName - Year set to Current Year\r\n";
				 helpMenuDT += "MonthName - Year set to Current Year\r\n";

				 helpMenuDT += "\r\nTime Variations\r\n";
				 helpMenuDT += "HH:MM\r\n";
				 helpMenuDT += "HH:MM<AM/PM>\r\n";
				 helpMenuDT += "HHMM<AM/PM> - Must have suffix if no colon between hours & minutes\r\n";

				 MessageBox::Show(helpMenuDT);
	}

	private: System::Void deletingATaskToolStripMenuItem_Click(System::Object^  sender, System::EventArgs^  e) {
				 String^ helpMenuDel = "                 Delete a Task Commands\r\n";

				 helpMenuDel += "\r\ndelete <Display index of task to be deleted>\r\n";
				 helpMenuDel += "del <Display index of task to be deleted>\r\n";
				 helpMenuDel += "\r\nDelete all tasks in the Schedule : clear\r\n";
				 
				 MessageBox::Show(helpMenuDel);
	}

	private: System::Void addModifyATaskEntityToolStripMenuItem_Click(System::Object^  sender, System::EventArgs^  e) {
				 String^ helpMenuEditAdd = "\t\tEditing a Task - Add or Modify a Task Entity\r\n";

				 helpMenuEditAdd += "\r\nedit <Display index of task to be edited> sub-command <New value of entity>";
				 helpMenuEditAdd += "Task entities can be edited with the same sub-commands that function with Add\r\n";
				 helpMenuEditAdd += "Task Name : -name <newTaskName>";
				 helpMenuEditAdd += "Starting Time of Task : -start <newDateTime> or -date <newDateTime>\r\n";
				 helpMenuEditAdd += "Ending Time of Task :  -end <newDateTime> or -due <newDateTime>\r\n";
				 helpMenuEditAdd += "Task Description : -desc <newDescription>\r\n";
				 helpMenuEditAdd += "Task Priority : -priority <newPriority>\r\n";

				 MessageBox::Show(helpMenuEditAdd);
	}

	private: System::Void removeATaskEntityToolStripMenuItem_Click(System::Object^  sender, System::EventArgs^  e) {
				 String^ helpMenuEditRmv = "\t\t    Editing a Task - Remove a Task Entity\r\n";

				 helpMenuEditRmv += "\r\nPreviously entered Date & Time, Description and Priority can be removed with \nedit, preceeded by the sub-command -remove or -rmv\r\n";
				 helpMenuEditRmv += "\r\nRemove Start and End times of task : edit <Display index of task to be edited> -rmv date\r\n";
				 helpMenuEditRmv += "Remove Start Time of task : edit <Display index of task to be edited> -rmv start\r\n";
				 helpMenuEditRmv += "Remove End Time of task : edit <Display index of task to be edited> -rmv end\r\n";
				 helpMenuEditRmv += "Remove Description of Task : edit <Display index of task to be edited> -rmv description or desc\r\n";
				 helpMenuEditRmv += "Remove Priority of Task : edit <Display index of task to be edited> -rmv priority or <p>\r\n";
				 MessageBox::Show(helpMenuEditRmv);
	}

	private: System::Void sortingScheduleToolStripMenuItem_Click(System::Object^  sender, System::EventArgs^  e) {
				 String^ helpMenuSort = "\t\t       Sort Schedule Commands\r\n";

				 helpMenuSort += "\r\nThe Schedule can be sorted by the following attributes : \r\n";
				 helpMenuSort += "By Task Name : sort name - Sorts Tasks by Name in alphabetical order\r\n";
				 helpMenuSort += "By Task Date : sort date - Sorts Tasks by Date in ascending order\r\n";
				 helpMenuSort += "By Task Priority : sort priority - Sorts Tasks by Priority in the order of High, Medium, Low\r\n";
				 helpMenuSort += "By Task Completion : sort completion - Sorts Tasks by completed Tasks\r\n";
				 helpMenuSort += "Task Updated Order : sort update - Sorts Tasks by the order in which Tasks were added\r\n";

				 MessageBox::Show(helpMenuSort);
	}

	private: System::Void viewScheduleToolStripMenuItem_Click(System::Object^  sender, System::EventArgs^  e) {
				 String^ helpMenuView = "\t\t       View Schedule Commands\r\n";

				 helpMenuView += "\r\nUser can view All tasks, Tasks within a given range of dates, Completed tasks or tasks with a specific Priority\r\n";
				 helpMenuView += "\r\nview all - All tasks in the Schedule are displayed\r\n";
				 helpMenuView += "view <date1> <date2> - All tasks in the specified date range are displayed\r\n";
				 helpMenuView += "view done - Tasks which are completed are displayed\r\n";
				 helpMenuView += "view undone - Tasks which are not completed are displayed\r\n";
				 helpMenuView += "view <H/M/L> - Tasks which have the priority specified are displayed\r\n";

				 MessageBox::Show(helpMenuView);

	}

	private: System::Void miscellneousToolStripMenuItem_Click(System::Object^  sender, System::EventArgs^  e) {
				 String^ helpMenuMisc = "\t\t\tOther Commands\r\n";

				 helpMenuMisc += "\r\nSearch\r\n";
				 helpMenuMisc += "Search a single keyword : search <keyword to be searched> - Keyword can be either a Task Name or Task Description\r\n";
				 helpMenuMisc += "Search multiple keywords : search <keyword1> + <keyword2> + ...\r\n";
				 helpMenuMisc += "\r\nMark Task as Completed\r\n";
				 helpMenuMisc += "done <Display index of completed task>\r\n";
				 helpMenuMisc += "\r\nMark Task as Not Completed\r\n";
				 helpMenuMisc += "undone <Display index of completed task>\r\n";
				 helpMenuMisc += "\r\nUndo Last Action\r\n";
				 helpMenuMisc += "undo\r\n";
				 helpMenuMisc += "\r\nChange Save Directory\r\n";
				 helpMenuMisc += "save <Address of new location to store the .txt file>\r\n";
				 helpMenuMisc += "\r\nExit Application\r\n";
				 helpMenuMisc += "exit\r\n";

				 MessageBox::Show(helpMenuMisc);
	}
		
	// Function to write to log file that that the user has exited if the user closes using the close button
	private: System::Void iPlannerUI_FormClosed(System::Object^  sender, System::Windows::Forms::FormClosedEventArgs^  e) {
				 Log closeLog;
				 closeLog.writeToLogFile("exit");
	}

};
}
	// End of segment: C:\Users\SKR\Documents\main\iPlannerUI\iPlannerUI.h





	/**
	 * origin: C:\Users\SKR\Documents\main\iStorage\History.cpp
	 */

//	Schedule
//	Tutorial Group 8 (Friday, 10:00AM); Group 2C

#include "History.h"

const string History::COMMAND_ADD = "ADD";
const string History::COMMAND_DELETE = "DELETE";
const string History::COMMAND_REPLACE = "REPLACE";
const string History::COMMAND_CLEAR = "CLEAR";
const string History::ERROR_ADD = "ERROR: Command and Item were not recorded.";
const string History::ERROR_EMPTYSTACKS = "ERROR: Undo has reached its limit.";
const string History::RESET_COMPLETION = "Reset completed.";

const string History::ERROR_INVALIDCOMMAND = "HISTORY::Invalid Command";

const string History::LOG_CONSTRUCTHISTORY = "HISTORY::ConstructHistory";
const string History::LOG_DESTRUCTHISTORY = "HISTORY::DestructHistory";
const string History::LOG_ITEMCOMMAND = "HISTORY::AddItemCommand";
const string History::LOG_CLEARCOMMAND = "HISTORY::AddClearCommand";
const string History::LOG_UNDOITEM = "HISTORY::UndoItemCommand";
const string History::LOG_UNDOCLEAR = "HISTORY::UndoClearCommand";
const string History::LOG_RESETHISTORY = "HISTORY::Reset\n";

//	Default Constructor
History::History() {
	_historyLogger.writeToLogFile(LOG_CONSTRUCTHISTORY);
}

//	Default Destructor
History::~History() {
	_historyLogger.writeToLogFile(LOG_DESTRUCTHISTORY);
}

//	Returns true if command is add, delete, or replace
bool History::isNormalHistoryCommand(string command) {
	try {
		if (command == COMMAND_ADD || command == COMMAND_DELETE || command == COMMAND_REPLACE) {
			return true;
		} else if (command != COMMAND_CLEAR) {
			throw ERROR_INVALIDCOMMAND;
		}
	}
	catch (string err_msg) {
		cerr << err_msg << endl;
	}
	assert(command != COMMAND_ADD);
	assert(command != COMMAND_DELETE);
	assert(command != COMMAND_REPLACE);

	return false;
}

bool History::isClearCommand(string command) {
	try {
		if (command == COMMAND_CLEAR) {
			return true;
		} else if (command != COMMAND_ADD && command != COMMAND_DELETE && command != COMMAND_REPLACE) {
			throw ERROR_INVALIDCOMMAND;
		}
	}
	catch (string err_msg) {
		cerr << err_msg << endl;
	}
	assert(command != COMMAND_CLEAR);

	return false;
}

//	Returns true if command stack is not empty
bool History::isValidUndoCall() {
	if (_commandStack.empty()) {
		return false;
	}
	
	assert(_commandStack.top() == COMMAND_ADD || _commandStack.top() == COMMAND_CLEAR || _commandStack.top() == COMMAND_REPLACE || _commandStack.top() == COMMAND_DELETE);

	return true;
}

//	Adds commands that modifies storage information (add, delete, edit)
string History::addCommand(string command, Item item) {
	if (isNormalHistoryCommand(command)) {
		_commandStack.push(command);
		_itemStack.push(item);

		assert(!_commandStack.empty());
		assert(!_itemStack.empty());

		_historyLogger.writeToLogFile(LOG_ITEMCOMMAND + command);
		return (command + item.displayItemFullDetails());
	}

	_historyLogger.writeToLogFile(LOG_ITEMCOMMAND + ERROR_ADD);
	return ERROR_ADD;
}

//	Adds clear command that cleared an entire schedule
string History::addClearCommand(vector<Item> clearedSchedule) {
	_commandStack.push(COMMAND_CLEAR);
	_scheduleStack.push(clearedSchedule);

	assert(!_commandStack.empty());
	assert(!_scheduleStack.empty());

	_historyLogger.writeToLogFile(LOG_CLEARCOMMAND);
	return COMMAND_CLEAR;
}

//	Removes commands from the item and command stack; returns item and command (both via reference)
string History::undoLastCommand(string& command, Item& latestItem, vector<Item>& lastestClearedSchedule) {
	try{
		if (isValidUndoCall()) {
			assert(!_commandStack.empty());
			command = _commandStack.top();

			if (isNormalHistoryCommand(command)) {
				assert(command == COMMAND_ADD || command == COMMAND_DELETE || command == COMMAND_REPLACE);
				assert(!_itemStack.empty());
				latestItem = _itemStack.top();
				removeUndoneCommand();

				_historyLogger.writeToLogFile(LOG_UNDOITEM + command);
				return (command + "\n" + latestItem.displayItemFullDetails());
			} else if (isClearCommand(command)) {
				assert(command == COMMAND_CLEAR);
				assert(!_scheduleStack.empty());
				lastestClearedSchedule = _scheduleStack.top();
				_commandStack.pop();
				_scheduleStack.pop();

				_historyLogger.writeToLogFile(LOG_UNDOCLEAR + command);
				return command;
			} else {
				throw ERROR_INVALIDCOMMAND;
			}
		}
	}
	catch (string err_msg) {
		cerr << err_msg << endl;
	}

	_historyLogger.writeToLogFile(LOG_UNDOITEM + ERROR_EMPTYSTACKS);
	return ERROR_EMPTYSTACKS;
}

bool History::removeUndoneCommand() {
	bool commandCompleted = false;

	assert(!_commandStack.empty());
	assert(!_itemStack.empty());
	_commandStack.pop();
	_itemStack.pop();
	commandCompleted = true;

	return commandCompleted;
}

string History::reset() {
	while (!_scheduleStack.empty()) {
		_scheduleStack.pop();
	}

	while (!_commandStack.empty()) {
		_commandStack.pop();
	}

	while (!_itemStack.empty()) {
		_itemStack.pop();
	}

	assert(_commandStack.empty());
	assert(_itemStack.empty());
	assert(_scheduleStack.empty());

	_historyLogger.writeToLogFile(LOG_RESETHISTORY);
	return RESET_COMPLETION;
}
	// End of segment: C:\Users\SKR\Documents\main\iStorage\History.cpp





